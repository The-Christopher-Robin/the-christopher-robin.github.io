# 1 a. Write a python program to read 2 numbers
# from the keyboard and perform the basic arithmetic
# operations based on the choice. (1-Add, 2-Subtract, 3-Multiply, 4-Divide)
def add(x, y):
 return x + y
def subtract(x, y):
 return x - y
def multiply(x, y):
 return x * y
def divide(x, y):
 if y == 0:
 return "Cannot divide by zero!"
 return x / y
print("Enter two numbers:")
num1 = float(input("Number 1: "))
num2 = float(input("Number 2: "))
print("Select operation:")
print("1. Add")
print("2. Subtract")
print("3. Multiply")
print("4. Divide")
choice = int(input("Enter your choice (1-4): "))
if choice == 1:
 result = add(num1, num2)
 operation = "+"
elif choice == 2:
 result = subtract(num1, num2)
 operation = "-"
elif choice == 3:
 result = multiply(num1, num2)
 operation = "*"
elif choice == 4:
 result = divide(num1, num2)
 operation = "/"
print(f"{num1} {operation} {num2} = {result}")
In [3]:
# 1 b. Write a python program to create a list of tuples
# having first element as the strings and the second element as the length of the string.
# Output the list of tuples sorted based on the length of the string.
def sort_by_length(strings):
 # Create a list of tuples with string and its length
 tuples = [(s, len(s)) for s in strings]
 # Sort the list of tuples based on the length of the string
 sorted_tuples = sorted(tuples, key=lambda x: x[1])
 return sorted_tuples
# Example usage
strings = ["apple", "banana", "cherry", "date", "elderberry"]
sorted_strings = sort_by_length(strings)
print(sorted_strings)
In [6]:
# 2 a. Write a python program to display all the prime numbers in the given range.
def is_prime(n):
 if n < 2:
 return False
 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False
 return True
def display_prime_numbers(start, end):
 prime_numbers = []
 for num in range(start, end + 1):
 if is_prime(num):
 prime_numbers.append(num)
 return prime_numbers
# Example usage
start_range = int(input("Enter the start of the range: "))
end_range = int(input("Enter the end of the range: "))
primes = display_prime_numbers(start_range, end_range)
print("Prime numbers within the range:", primes)
In [11]:
# 2 b. Write a python program to create a list with all the subject names of the 4th semester
# and perform the following operations.
# i. Display the list using for loop.
# ii. Display 2nd and 5th element of the list.
# iii. Display first 4 elements of the list using the range of indexes.
# iv. Display last 4 elements of the list using the range of negative indexes.
# v. Display if "Python Programming Lab" is available in the List or not.
# vi. Demonstrate the working of append () and insert () function.
# vii. Demonstrate the working of remove() and pop() function.
# Create a list of subject names for the 4th semester
subjects = ["Data Communication Network", "Design and Analysis of Algorithms", "DCN Lab",
 "DAA Lab", "Microcontrollers and IoT", "Maths", "Python Programming Lab"]
# i. Display the list using a for loop
print("List of subjects:")
for subject in subjects:
 print(subject)
# ii. Display the 2nd and 5th element of the list
print("\n2nd and 5th elements:")
print(subjects[1]) # 2nd element (index 1)
print(subjects[4]) # 5th element (index 4)
# iii. Display the first 4 elements of the list using the range of indexes
print("\nFirst 4 elements:")
for i in range(4):
 print(subjects[i])
# iv. Display the last 4 elements of the list using the range of negative indexes
print("\nLast 4 elements:")
for i in range(-4, 0):
 print(subjects[i])
# v. Display if "Python Programming Lab" is available in the list or not
if "Python Programming Lab" in subjects:
 print("\n'Python Programming Lab' is available in the list.")
else:
 print("\n'Python Programming Lab' is not available in the list.")
# vi. Demonstrate the working of append() and insert() function
subjects.append("Data Mining") # Append a subject at the end of the list
print("\nList after appending 'Data Mining':", subjects)
subjects.insert(2, "Artificial Intelligence") # Insert a subject at index 2
print("List after inserting 'Artificial Intelligence' at index 2:", subjects)
# vii. Demonstrate the working of remove() and pop() function
subjects.remove("DCN Lab") # Remove a subject from the list
print("\nList after removing 'DCN Lab':", subjects)
popped_subject = subjects.pop(3) # Remove and return the subject at index 3
print("Popped subject at index 3:", popped_subject)
print("List after popping subject at index 3:", subjects)
In [10]:
#3 a. Create a dictionary for words and their meanings.
# Write functions to add a new entry (word:meaning),
# search for a particular word and retrieve meaning,
# given meaning find words with same meaning, remove an entry,
# display all words sorted alphabetically. [Program must be menu driven].
def add_word(dictionary):
 word = input("Enter the word: ")
 meaning = input("Enter the meaning: ")
 dictionary[word] = meaning
 print("Word added successfully!")
def search_word(dictionary):
 word = input("Enter the word to search: ")
 if word in dictionary:
 print(f"Meaning of '{word}': {dictionary[word]}")
 else:
 print(f"'{word}' not found in the dictionary.")
def find_words_by_meaning(dictionary):
 meaning = input("Enter the meaning to search for words: ")
 words = [word for word, meaning_value in dictionary.items() if meaning_value == meaning]
 if words:
 print(f"Words with meaning '{meaning}': {', '.join(words)}")
 else:
 print(f"No words found with meaning '{meaning}'.")
def remove_word(dictionary):
 word = input("Enter the word to remove: ")
 if word in dictionary:
 del dictionary[word]
 print(f"'{word}' removed from the dictionary.")
 else:
 print(f"'{word}' not found in the dictionary.")
def display_sorted_words(dictionary):
 sorted_words = sorted(dictionary.keys())
 print("Words in the dictionary (sorted alphabetically):")
 for word in sorted_words:
 print(f"{word}: {dictionary[word]}")
def display_menu():
 print("\n----- Dictionary Menu -----")
 print("1. Add a new word")
 print("2. Search for a word")
 print("3. Find words with the same meaning")
 print("4. Remove a word")
 print("5. Display all words sorted alphabetically")
 print("6. Exit")
dictionary = {}
while True:
 display_menu()
 choice = input("Enter your choice (1-6): ")
 if choice == "1":
 add_word(dictionary)
 elif choice == "2":
 search_word(dictionary)
 elif choice == "3":
 find_words_by_meaning(dictionary)
 elif choice == "4":
 remove_word(dictionary)
 elif choice == "5":
 display_sorted_words(dictionary)
 elif choice == "6":
 print("Exiting the program.")
 break
 else:
 print("Invalid choice. Please try again.")
In [12]:
#3 b. Write a python program to perform the following operations using user defined functions
# ● Display the maximum and minimum number from the array.
# ● Display the second largest number from the array without sorting
def find_max_min(array):
 maximum = max(array)
 minimum = min(array)
 return maximum, minimum
def find_second_largest(array):
 max_num = max(array)
 second_largest = float('-inf')
 for num in array:
 if num < max_num and num > second_largest:
 second_largest = num
 return second_largest
# Example usage
array = [10, 5, 8, 20, 15]
max_num, min_num = find_max_min(array)
second_largest = find_second_largest(array)
print("Array:", array)
print("Maximum number:", max_num)
print("Minimum number:", min_num)
print("Second largest number:", second_largest)
In [13]:
# 4 a. Write a python program to initialize a dictionary of usernames and passwords
# associated with it.passwd={‘rahul’: ‘genius’, ‘kumar’: ‘smart’, ‘ankita’: ‘intelligent’} perform the following functions:
# i. To print all the items in the dictionary.
# ii. To print all the keys in the dictionary.
# iii. To print all the values in the dictionary.
# iv. To get the passwords of users. For example, passwd[‘rahul’]= genius
# v. Change the password of a particular user. For example, passwd[‘ankita’]=‘brilliant’
passwd = {'rahul': 'genius', 'kumar': 'smart', 'ankita': 'intelligent'}
# i. Print all the items in the dictionary
print("All items in the dictionary:")
for username, password in passwd.items():
 print(f"Username: {username}, Password: {password}")
# ii. Print all the keys in the dictionary
print("\nAll keys in the dictionary:")
for username in passwd.keys():
 print(username)
# iii. Print all the values in the dictionary
print("\nAll values in the dictionary:")
for password in passwd.values():
 print(password)
# iv. Get the passwords of users
print("\nPasswords of users:")
print("rahul:", passwd['rahul'])
print("kumar:", passwd['kumar'])
print("ankita:", passwd['ankita'])
# v. Change the password of a particular user
passwd['ankita'] = 'brilliant'
print("\nNew password of ankita:", passwd['ankita'])
In [17]:
# 4b. Develop a python program to count all the occurrences of vowels,
# consonants and digits from the given text using Regular expressions.
import re
def count_occurrences(text):
 vowels = re.findall(r'[aeiouAEIOU]', text)
 consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', text)
 digits = re.findall(r'\d', text)

 vowel_count = len(vowels)
 consonant_count = len(consonants)
 digit_count = len(digits)

 return vowel_count, consonant_count, digit_count
# Example usage
text = input("Enter the text: ")
vowels, consonants, digits = count_occurrences(text)
print("Occurrences:")
print("Vowels:", vowels)
print("Consonants:", consonants)
print("Digits:", digits)
In [1]:
#5 a. Write a python program to create a tuple and perform the following operations
# ● Adding an items
# ● Displaying the length of the tuple
# ● Checking for an item in the tuple
# ● Accessing an items
# Creating a tuple
my_tuple = (1, 2, 3, 4, 5)
# Adding an item
my_tuple = my_tuple + (6,)
# Displaying the length of the tuple
print("Length of the tuple:", len(my_tuple))
# Checking for an item in the tuple
item = 4
if item in my_tuple:
 print(f"{item} is present in the tuple")
else:
 print(f"{item} is not present in the tuple")
# Accessing an item
index = 2
if index < len(my_tuple):
 print(f"Item at index {index}: {my_tuple[index]}")
else:
 print("Index out of range")
In [4]:
# 5b. Write a python program to create a text file and ask the user to enter 5-6 lines of text.
# Display the longest and the shortest word from the file. Display the length of these words.
# Create a text file
file_name = "text_file.txt"
# Prompt the user to enter lines of text
print("Enter 5-6 lines of text:")
lines = []
for _ in range(5):
 line = input()
 lines.append(line)
# Write the lines of text to the file
with open(file_name, "w") as file:
 file.write("\n".join(lines))
# Read the file and find the longest and shortest words
with open(file_name, "r") as file:
 content = file.read()
words = content.split()
# Find the longest and shortest words
longest_word = max(words, key=len)
shortest_word = min(words, key=len)
# Display the longest and shortest words and their lengths
print("Longest word:", longest_word)
print("Length of longest word:", len(longest_word))
print("Shortest word:", shortest_word)
print("Length of shortest word:", len(shortest_word))
In [5]:
#6 a. Write a python function binarySearch() to read a sorted array and search for the key element.
# Display the appropriate messages.
def binarySearch(arr, key):
 left = 0
 right = len(arr) - 1
 while left <= right:
 mid = (left + right) // 2
 if arr[mid] == key:
 return f"Element {key} found at index {mid}."
 if arr[mid] < key:
 left = mid + 1
 else:
 right = mid - 1
 return f"Element {key} not found in the array."
# Example usage
sorted_array = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
search_key = 12
result = binarySearch(sorted_array, search_key)
print(result)
In [6]:
#6 b. Write a python program to simulate saving account processing in a bank using constructors.
# Create Deposit and Withdraw with other member function and Check for Validation while withdrawing the amount.
# Raise the appropriate exceptions when depositing and withdrawing an incorrect amount. Display appropriate messages.
class SavingsAccount:
 def __init__(self, account_number, initial_balance):
 self.account_number = account_number
 self.balance = initial_balance
 def deposit(self, amount):
 if amount <= 0:
 raise ValueError("Deposit amount must be positive.")
 self.balance += amount
 print(f"Deposited {amount}. New balance: {self.balance}")
 def withdraw(self, amount):
 if amount <= 0:
 raise ValueError("Withdrawal amount must be positive.")
 if amount > self.balance:
 raise ValueError("Insufficient funds for withdrawal.")
 self.balance -= amount
 print(f"Withdrew {amount}. New balance: {self.balance}")
 def check_balance(self):
 print(f"Account balance: {self.balance}")
# Example usage
account = SavingsAccount("123456", 1000)
try:
 account.check_balance()
 account.deposit(500)
 account.check_balance()
 account.withdraw(200)
 account.check_balance()
 account.withdraw(1500) # Raises ValueError: Insufficient funds
except ValueError as e:
 print(f"Error: {str(e)}")
In [7]:
#7 a. Develop a python program to create two classes called as Stack and Queue.
# Provide the necessary data members and methods to display the operations that can be performed on stacks and queues.
# Test for all type of conditions.
class Stack:
 def __init__(self):
 self.items = []
 def is_empty(self):
 return len(self.items) == 0
 def push(self, item):
 self.items.append(item)
 print(f"Pushed item: {item}")
 def pop(self):
 if self.is_empty():
 print("Stack is empty. Cannot pop an item.")
 return None
 return self.items.pop()
 def display(self):
 print("Stack:", self.items)
class Queue:
 def __init__(self):
 self.items = []
 def is_empty(self):
 return len(self.items) == 0
 def enqueue(self, item):
 self.items.append(item)
 print(f"Enqueued item: {item}")
 def dequeue(self):
 if self.is_empty():
 print("Queue is empty. Cannot dequeue an item.")
 return None
 return self.items.pop(0)
 def display(self):
 print("Queue:", self.items)
# Example usage
stack = Stack()
stack.push(10)
stack.push(20)
stack.push(30)
stack.display()
print("Popped item:", stack.pop())
stack.display()
queue = Queue()
queue.enqueue(10)
queue.enqueue(20)
queue.enqueue(30)
queue.display()
print("Dequeued item:", queue.dequeue())
queue.display()
In [ ]:
# 7 b. Write a python program to utilize NumPy and perform the following operations.
# • Read and display a 2D Array.
# • Display the array elements in the reverse order.
# • Display all the elements of principal diagonal elements.
# • Sort the 2D array in ascending and descending order
import numpy as np
# Read and display a 2D Array
rows = int(input("Enter the number of rows: "))
cols = int(input("Enter the number of columns: "))
array_data = []
for i in range(rows):
 row = []
 for j in range(cols):
 element = int(input(f"Enter element at position ({i}, {j}): "))
 row.append(element)
 array_data.append(row)
array = np.array(array_data)
print("Original Array:")
print(array)
# Display the array elements in reverse order
reverse_array = np.flip(array)
print("\nArray in Reverse Order:")
print(reverse_array)
# Display principal diagonal elements
diagonal_elements = np.diagonal(array)
print("\nPrincipal Diagonal Elements:")
print(diagonal_elements)
# Sort the 2D array in ascending and descending order
sorted_array_asc = np.sort(array, axis=None)
sorted_array_desc = np.sort(array, axis=None)[::-1]
sorted_array_asc = sorted_array_asc.reshape(array.shape)
sorted_array_desc = sorted_array_desc.reshape(array.shape)
print("\nSorted Array in Ascending Order:")
print(sorted_array_asc)
print("\nSorted Array in Descending Order:")
print(sorted_array_desc)
In [8]:
#8a. Develop a python program to read 20 random numbers.
# Display all the odd numbers from this list which are of length 2 and 4.
import random
random_numbers = []
for _ in range(20):
 random_numbers.append(random.randint(1, 100))
odd_numbers = [num for num in random_numbers if num % 2 != 0]
filtered_numbers = [num for num in odd_numbers if len(str(num)) in (2, 4)]
print("Random Numbers:", random_numbers)
print("Odd Numbers of Length 2 or 4:", filtered_numbers)
In [ ]:
#8 b. Develop a python program to create a text file and ask the user to enter 5-6 lines of text.
# Count the number of upper case, lower case and digits in the file. Display the details of the file.
def count_characters(text):
 upper_count = 0
 lower_count = 0
 digit_count = 0
 for char in text:
 if char.isupper():
 upper_count += 1
 elif char.islower():
 lower_count += 1
 elif char.isdigit():
 digit_count += 1
 return upper_count, lower_count, digit_count
# Create a text file
file_name = "text_file.txt"
# Prompt the user to enter lines of text
print("Enter 5-6 lines of text:")
lines = []
for _ in range(5):
 line = input()
 lines.append(line)
# Write the lines of text to the file
with open(file_name, "w") as file:
 file.write("\n".join(lines))
# Read the file
with open(file_name, "r") as file:
 content = file.read()
# Count the characters in the file
upper_count, lower_count, digit_count = count_characters(content)
# Display the details
print("File Details:")
print("=============")
print("Content:")
print(content)
print("Uppercase letters count:", upper_count)
print("Lowercase letters count:", lower_count)
print("Digits count:", digit_count)
In [13]:
#9 a. Develop a python program read a dataset and perform the following using Pandas
# • Visualize the dataset using plot ().
# • Draw the Scatter plot for the dataset on any column.
# • Display the scatter plot with different colors.
# • Draw the Histogram for the dataset on any column.
import pandas as pd
import matplotlib.pyplot as plt
# Read the data from CSV file
file_path = 'C:\\Users\\ABDUL WAHAB\\OneDrive\\Desktop\\train.csv' # Replace with the actual path to your CSV file
df = pd.read_csv(file_path)
# Visualize the dataset using plot()
# Assuming you want to visualize the first few columns
df.iloc[:, :5].plot(x="PassengerId", kind="line")
plt.title("Visualization of First Few Columns")
plt.xlabel("Passenger ID")
plt.ylabel("Value")
plt.show()
# Draw a scatter plot for Age vs Fare
plt.scatter(df["Age"], df["Fare"], c=df["Survived"], cmap="coolwarm")
plt.title("Scatter Plot: Age vs Fare")
plt.xlabel("Age")
plt.ylabel("Fare")
plt.colorbar(label="Survived")
plt.show()
# Draw a histogram for Age
plt.hist(df["Age"].dropna(), bins=10, edgecolor="black")
plt.title("Age Histogram")
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.show()
In [9]:
# 9 b. Develop a python program to demonstrate handling multiple exceptions using try,
# except, else and finally block statements.
def divide_numbers(a, b):
 try:
 result = a / b
 print(f"Result of division: {result}")
 except ZeroDivisionError:
 print("Error: Division by zero is not allowed.")
 except TypeError:
 print("Error: Invalid types for division.")
 else:
 print("No exceptions occurred during division.")
 finally:
 print("Finally block executed.")
# Example usage
divide_numbers(10, 2) # Valid division
divide_numbers(10, 0) # Raises ZeroDivisionError
divide_numbers(10, '2') # Raises TypeError
In [1]:
#10 a. Write a python program to demonstrate handling of the following exceptions using try and except.
# • Name Error
# • Index Error
# • Key Error
# • Zero Division Error
def demonstrate_exceptions():
 try:
 # Name Error
 print(undefined_variable)
 except NameError:
 print("Caught a NameError: The variable is not defined.")
 try:
 # Index Error
 my_list = [1, 2, 3]
 print(my_list[5])
 except IndexError:
 print("Caught an IndexError: Index is out of range.")
 try:
 # Key Error
 my_dict = {"key": "value"}
 print(my_dict["nonexistent_key"])
 except KeyError:
 print("Caught a KeyError: The key does not exist in the dictionary.")
 try:
 # Zero Division Error
 result = 10 / 0
 except ZeroDivisionError:
 print("Caught a ZeroDivisionError: Cannot divide by zero.")
demonstrate_exceptions()
In [12]:
# 10b. Write a python program to read the Iris dataset and perform the following operations using Pandas
# • Display first 5 rows of the dataset.
# • Display last 5 rows of the dataset.
# • Display the information about the dataset.
# • Display the overview of the values of each column.
# • Visualize the dataset using plot ().
import pandas as pd
import matplotlib.pyplot as plt
# Read the Iris dataset
file_path = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
column_names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]
data = pd.read_csv(file_path, names=column_names)
# Display first 5 rows of the dataset
print("First 5 rows of the dataset:")
print(data.head())
# Display last 5 rows of the dataset
print("\nLast 5 rows of the dataset:")
print(data.tail())
# Display information about the dataset
print("\nInformation about the dataset:")
print(data.info())
# Display overview of the values of each column
print("\nOverview of the values of each column:")
print(data.describe())
# Visualize the dataset using plot()
data.plot()
plt.title("Iris Dataset Visualization")
plt.xlabel("Index")
plt.ylabel("Values")
plt.show()
