DCN

ICMP
First open wireshark using terminal and start capture 
Then open terminal new window and type ping www.youtube.com 
And come back to terminal and stop capturing
Type icmp, sort with time and write answers


1B
Design and simulate a wired network with duplex links between 3 nodes with CDR over
UDP. Set the queue size vary the bandwidth and find the number of packets dropped.

traffic-controll.cc copy
delete full void function below NS_LOG above int main(int argc)


NodeContainer nodes;
nodes.Create(3); not 2

make it 
NetDeviceContainer devices01
devices01 = pointToPoint.Install(nodes.Get(0), nodes.Get(1));
NetDeviceContainer devices12
devices12 = pointToPoint.Install(nodes.Get(1), nodes.Get(2));

two lines later
delete entirely trafficcontrolhelper tch onwards till makecallback(devicepacket soemthing) below stack.install
above ipv4address helper

after ipv4address helper address
addrees.setbase("10.1.1.0"....)
Ipv4InterfaceContainer interfaces01 = address.assign(devices01)
copy and paste again
addrees.setbase("10.1.2.0"....)
Ipv4InterfaceContainer interfaces12 = address.assign(devices12)


within //flow

first para last line, nodes.Get(2));

first inetsocketaddress appearance: (interfaces12.GetAddress(1)...)
same para, nodes.get(0)

delete entirely uniter32_t onwards till the end ((((KEEP SIMULATOR::DESTROY() and RETURN0;}



copy third.cc from tutorial
copy this line: Ipv4GlobalRoutingHelper::PopulateRoutingTables():


paste in main file below Ipv4interfaceContainer interfaces12
paste here: Ipv4GlobalRoutingHelper::PopulateRoutingTables():

change line inside main function if(transportProt.compare("Udp")
./waf --run labfilename
./waf --run labfilename --vis


next ns3 question (3rd) possibly (3B Design and simulate simple Extended Service Set with transmitting nodes in wireless LAN
and determine the performance with respect to transmission of packets.)

copy third.cc
paste in headers from traffic control.cc
include flow-monitor..

towards the end
delete from UdpEchoServerHelper till end of if statement.
keep last 3 lines(simulator run, destroy return 0})

from traffic controll.cc
copy //flow till first uint32_end so right before next uint32_ begins

paste in 3rd.cc above simulator run
2nd line sockettype --> "ns3::UdpSocketFactory"
next line .install (csmaNodes.Get(0));

2nd line after simulation time -->10
next para onoffhelper (socket type --> "ns3::UdpSocketFactory"

next para csmaNodes.get(1) maybe for this para 0, 1, simtime = 10
next para simtim = 10
from 3rd .cc copy and paste ABOVE FLOW
Ipv4GlobalRoutingHelpher::PopulateRoutinTables();
run

CLIENT SERVER
Server.java


import java.net.*; 
import java.io.*; 
public class TCPS 
{ 
public static void main(String[] args) throws Exception 
{ 
ServerSocket sersock=new ServerSocket(4000); 
System.out.println("Server ready for connection"); 

Socket sock=sersock.accept(); 

System.out.println("Connection Is successful and waiting for chatting"); 

InputStream istream=sock.getInputStream(); 

BufferedReader fileRead=new BufferedReader(new InputStreamReader(istream)); 

String fname=fileRead.readLine(); 

BufferedReader ContentRead=new BufferedReader(new FileReader(fname)); 

OutputStream ostream=sock.getOutputStream(); 

PrintWriter pwrite=new PrintWriter(ostream,true); 

String str; 

while((str=ContentRead.readLine())!=null){ 

pwrite.println(str); 

} 
sock.close(); 
sersock.close(); 
pwrite.close(); 
fileRead.close(); 
ContentRead.close(); 
} 
}



Client.java
import java.net.*; 
import java.io.*; 
public class TCPC
{ 
public static void main(String[] args) throws Exception 
{ 
Socket sock=new Socket("127.0.01",4000); 

System.out.println("Enter the filename"); 

BufferedReader keyRead=new BufferedReader(new InputStreamReader(System.in)); 

String fname=keyRead.readLine(); 

OutputStream ostream=sock.getOutputStream(); 

PrintWriter pwrite=new PrintWriter(ostream,true); 

pwrite.println(fname); 

InputStream istream=sock.getInputStream(); 

BufferedReader socketRead=new BufferedReader(new InputStreamReader(istream)); 

String str; 
while((str=socketRead.readLine())!=null) 
{ 
System.out.println(str); 
} 

pwrite.close(); 
socketRead.close(); 
keyRead.close(); 
} 
} 

Leaky Bucket
import java.util.Scanner;
import java.lang.*;
public class lab7 {
public static void main(String[] args)
{
int i;
int a[]=new int[20];
int buck_rem=0,buck_cap=4,rate=3,sent,recv;
Scanner in = new Scanner(System.in);
System.out.println("Enter the number of packets");
int n = in.nextInt();
System.out.println("Enter the packets");
for(i=1;i<=n;i++)
a[i]= in.nextInt();
System.out.println("Clock \t packet size \t accept \t sent \t remaining");
for(i=1;i<=n;i++)
{
if(a[i]!=0)
{
if(buck_rem+a[i]>buck_cap)
recv=-1;
else
{
recv=a[i];
buck_rem+=a[i];
}
}
else
recv=0;
if(buck_rem!=0)
{
if(buck_rem<rate)
{	sent=buck_rem;
buck_rem=0;
}
else
{
sent=rate;
buck_rem=buck_rem-rate;
}
}
else
sent=0;	
if(recv==-1)
System.out.println(+i+ "\t\t" +a[i]+ "\t dropped \t" +  sent +"\t" +buck_rem);
else
System.out.println(+i+ "\t\t" +a[i] +"\t\t" +recv +"\t" +sent + "\t" +buck_rem);
}
}
}



