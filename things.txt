#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvGPIO.h"
#include "Driver\DrvUART.h"
#include "Driver\DrvSYS.h"

void EINT1Callback(void)
{
  DrvGPIO_ClrBit(E_GPC,12); 
DrvSYS_Delay(100000);
DrvGPIO_SetBit(E_GPC,12);
DrvSYS_Delay(100000);   
}

int main (void)
{
UNLOCKREG();
DrvSYS_SetOscCtrl(E_SYS_XTL12M, 1);
DrvSYS_Delay(5000);
DrvSYS_SelectHCLKSource(0);
LOCKREG();

DrvGPIO_Open(E_GPC, 12, E_IO_OUTPUT);
 DrvGPIO_Open(E_GPB, 15, E_IO_INPUT);
 DrvGPIO_EnableEINT1(E_IO_BOTH_EDGE, E_MODE_EDGE, EINT1Callback);

  while(1)
{
  }

}



buzzzer

#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvGPIO.h"
#include "Driver\DrvUART.h"
#include "Driver\DrvSYS.h"

// External Interrupt Handler (INT button to trigger GPB15)
void EINT1Callback(void)
{
  DrvGPIO_ClrBit(E_GPB,11); // GPB11 = 0 to turn on Buzzer
DrvSYS_Delay(100000);    // Delay
DrvGPIO_SetBit(E_GPB,11); // GPB11 = 1 to turn off Buzzer
DrvSYS_Delay(100000);    // Delay
}

int main (void)
{
UNLOCKREG();
DrvSYS_SetOscCtrl(E_SYS_XTL12M, 1); // external 12MHz Crystal
DrvSYS_Delay(5000);                 // delay for stable clock
DrvSYS_SelectHCLKSource(0);         // clock source = 12MHz Crystal
LOCKREG();

DrvGPIO_Open(E_GPB, 11, E_IO_OUTPUT); // initial GPIO pin GPB11 for controlling Buzzer
   
// External Interrupt
  DrvGPIO_Open(E_GPB, 15, E_IO_INPUT);                             // configure external interrupt pin GPB15
  DrvGPIO_EnableEINT1(E_IO_BOTH_EDGE, E_MODE_EDGE, EINT1Callback); // configure external interrupt

  while(1)
{
  }

}


5.RASPBERRY
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
GPIO.setup(18,GPIO.OUT)
GPIO.output(18,GPIO.HIGH)
time.sleep(3)
GPIO.output(18,GPIO.LOW)
GPIO.cleanup()


4. DISPLAY MSG
#include <stdio.h>
#include "NUC1xx.h"
#include "Driver\DrvSYS.h"
#include "Driver\DrvGPIO.h"
#include "NUC1xx-LB_002\LCD_Driver.h"
int main(void)
{
UNLOCKREG();
DrvSYS_Open(48000000); // set to 48MHz
LOCKREG();
Initial_panel();
clr_all_panel();
print_lcd(0, "Smpl_LCD_Text ");
print_lcd(1, "Nu-LB-NUC140 ");
print_lcd(2, "Test LCD Display");
print_lcd(3, "Nuvoton NuMicro ");
}




q) sum of 10 nums


;additon 32 bit	


		PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			
              EXPORT __main			
; Start of CODE area 
DataIn EQU 0x20000000
Sum EQU 0x20000040

__main
	LDR r0,=DataIn; Get the address of variable 'DataIn'
	MOVS r1, #10 ; loop counter
	MOVS r2, #0 ; Result - starting from 0
add_loop
	LDM r0!,{r3} ; Load result and increment address
	ADDS r2, r3 ; add to result
	SUBS r1, #1 ; increment loop counter
	BNE add_loop
	LDR r0,=Sum ; Get the address of variable 'Sum'
	STR r2,[r0] ; Save result to Sum
stop B stop
	END


q) push pop in case

PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
              EXPORT __main			 
; Start of CODE area 
_main                 
               LDR r3,=0x20000100
			   LDR r0,=0x20000050
			   LDMIA r3!,{r1,r2}
			  
			   mov SP,r0
			   PUSH {r1,r2}
			   POP {r4,r5}
stop            B   stop			   
               END               




q) 2x+9

Main.asm
PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
                                          EXPORT __main 
			  EXTERN  func
; Start of CODE area 
__main
	LDR r0,=0x10;
 BL func
stop B stop
  END

PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY
	EXPORT func
	EXTERN func2
	
func
	push{LR}
	MOVS R1,#08
	BL func2
	pop{PC}
    END



       PRESERVE8
	THUMB
	AREA |.text|, CODE, READONLY
	EXPORT func2
	
func2
	MOVS r2,#08
	BX LR
       END




q) swtich case

PRESERVE8 ; Indicate the code here preserve  
; 8 byte stack alignment         
                     THUMB     ; Indicate THUMB code is used       
                 AREA    |.text|, CODE, READONLY
			   
              EXPORT __main			 
; Start of CODE area 
__main
	 LDR R0, =0
	 CMP R0, #3 ; Compare input to maximum valid choice
	 BHI default_case ; Branch to default case if higher than 3 
	 MOVS R2, #4 ; Multiply branch table offset by 4 
	 MULS R0, R2, R0 ; (size of each entry) 
        LDR R1, =BranchTable ; Get base address of branch table(0x284)
        LDR R2,[R1,R0] ; Get the actual branch destination 
        BX R2 ; Branch to destination 
ALIGN 4 ; Alignment control. The table has
BranchTable ; to be word aligned to prevent unaligned read ;table of each destination address
    DCD Dest0 
    DCD  Dest1 
    DCD Dest2 
    DCD Dest3 
default_case 
stop B stop; Instructions for default case 
Dest0  ldr r0, =10 
stop1 B stop1 ; Instructions for case ‘0’ 
Dest1 ldr r0, =20  
stop2 B stop2 ; Instructions for case ‘1’ 
Dest2 ldr r0, =30  
stop3 B stop3 ; Instructions for case ‘2’ 
Dest3 ldr r0, =40  
stop4 B stop4 ; Instructions for case ‘3’ 
	 
	 END


include
core support
device support
driver
nuc1x
