import copy

def candidate_elimination(examples):
    # Initialize general and specific hypotheses
    G = set([("?",) * (len(examples[0]) - 1)])
    S = set([("0",) * (len(examples[0]) - 1)])

    for example in examples:
        if example[-1] == "yes":  # Positive example
            # Remove inconsistent hypotheses from G
            G.difference_update([g for g in G if not is_consistent(example, g)])
            
            # Generalize S to be consistent with the positive example
            S_new = copy.deepcopy(S)
            for s in S:
                if not is_consistent(example, s):
                    S_new.remove(s)
                    s_generalized = generalize_s(s, example)
                    S_new.add(s_generalized)
            S = S_new
        else:  # Negative example
            # Remove inconsistent hypotheses from S
            S.difference_update([s for s in S if not is_consistent(example, s)])
            
            # Specialize G to be consistent with the negative example
            G_new = copy.deepcopy(G)
            for g in G:
                if is_consistent(example, g):
                    G_new.remove(g)
                    g_specialized = specialize_g(g, example)
                    G_new.add(g_specialized)
            G = G_new

    return G, S

def is_consistent(example, hypothesis):
    return all(h == "?" or h == e for h, e in zip(hypothesis, example[:-1]))

def generalize_s(hypothesis, example):
    return tuple(h if h == e or h == "?" else "?" for h, e in zip(hypothesis, example[:-1]))

def specialize_g(hypothesis, example):
    return tuple(h if h == "?" or h == e else "0" for h, e in zip(hypothesis, example[:-1]))

# Example usage:
examples = [
    ("sunny", "warm", "normal", "strong", "warm", "same", "yes"),
    ("sunny", "warm", "high", "strong", "warm", "same", "yes"),
    ("rainy", "cold", "high", "strong", "warm", "change", "no"),
    ("sunny", "warm", "high", "strong", "cool", "change", "yes"),
]

G, S = candidate_elimination(examples)
print("Specific Hypotheses (S):", S)
print("General Hypotheses (G):", G)
